/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidadgrupo25.Vistas;

//import com.oracle.webservices.internal.api.databinding.DatabindingModeFeature;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadgrupo25.Entidades.Alumno;
import universidadgrupo25.Entidades.Inscripcion;
import universidadgrupo25.Entidades.Materia;
import universidadgrupo25.accesoADatos.AlumnoData;
import universidadgrupo25.accesoADatos.InscripcionData;
import universidadgrupo25.accesoADatos.MateriaData;
   

public class UpdateNota extends javax.swing.JInternalFrame {
    
   private List<Materia> listaM; 
   private List<Alumno> listaA;
   private InscripcionData inscD;
   private MateriaData md;
   private AlumnoData ad;
   private DefaultTableModel model;

    
    
    public UpdateNota() {
        initComponents();
        
        ad= new AlumnoData();
        md= new MateriaData ();
        inscD= new InscripcionData();
        listaA=  ad.listarAlumnos();
        listaM= md.listarMaterias();
        model= new DefaultTableModel();
        cargarAlumno();
        editartabla();
        borrarFilaTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlCargaNota = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jcbCargarAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCargaNota = new javax.swing.JTable();
        jbSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbMateria = new javax.swing.JComboBox<>();
        jtfcargaNota = new javax.swing.JTextField();
        jbActualizar = new javax.swing.JButton();

        setClosable(true);
        setForeground(new java.awt.Color(60, 63, 65));
        setIconifiable(true);
        setMaximizable(true);

        jlCargaNota.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jlCargaNota.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCargaNota.setText("Carga de notas");

        jLabel2.setText("Seleccione un alumno:");

        jcbCargarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCargarAlumnoActionPerformed(evt);
            }
        });

        jtCargaNota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jtCargaNota.setInheritsPopupMenu(true);
        jScrollPane1.setViewportView(jtCargaNota);

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione una Materia");

        jLabel3.setText("Cargar Nota");

        jcbMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMateriaActionPerformed(evt);
            }
        });

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlCargaNota, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfcargaNota, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcbMateria, javax.swing.GroupLayout.Alignment.TRAILING, 0, 219, Short.MAX_VALUE)
                                    .addComponent(jcbCargarAlumno, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(jbActualizar)
                                .addGap(61, 61, 61)
                                .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 92, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlCargaNota)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jcbCargarAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfcargaNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbActualizar)
                    .addComponent(jbSalir))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbCargarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCargarAlumnoActionPerformed
       
        jcbMateria.removeAllItems();
         Alumno alumno= (Alumno)jcbCargarAlumno.getSelectedItem();
         mostrarMateria(alumno);
         if(jcbMateria.getItemCount()==0){
         JOptionPane.showMessageDialog(this, "Este alumno no esta inscripto en ninguna materia");
         }
         
         
         
             
        
    }//GEN-LAST:event_jcbCargarAlumnoActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        
        try {
           this.setClosed(true);
       } catch (PropertyVetoException ex) {
           JOptionPane.showMessageDialog(this, "Error al salir de la tabla");
       }
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcbMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMateriaActionPerformed
        try{
            borrarFilaTabla();
            
            Alumno al = (Alumno) jcbCargarAlumno.getSelectedItem();
            Materia mat = (Materia) jcbMateria.getSelectedItem();

            List <Inscripcion> listaI = inscD.obtenerInscriptoAlumno(al.getIdAlumno(), mat.getIdMateria());
            
            
            for (Inscripcion insc : listaI) {
                
                model.addRow(new Object[]{insc.getMateria().getIdMateria(), insc.getMateria().getNombre(), insc.getNota()});
            }
        }catch(NullPointerException e){
            return;
        }
        
    }//GEN-LAST:event_jcbMateriaActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        
        Alumno al = (Alumno) jcbCargarAlumno.getSelectedItem();
        Materia ma = (Materia) jcbMateria.getSelectedItem();
        double nota = Double.parseDouble(jtfcargaNota.getText());
        
        inscD.actualizarNota(al.getIdAlumno(), ma.getIdMateria(), nota);
        borrarFilaTabla();
        jtfcargaNota.setText("");
    }//GEN-LAST:event_jbActualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbCargarAlumno;
    private javax.swing.JComboBox<Materia> jcbMateria;
    private javax.swing.JLabel jlCargaNota;
    private javax.swing.JTable jtCargaNota;
    private javax.swing.JTextField jtfcargaNota;
    // End of variables declaration//GEN-END:variables

    private void cargarAlumno (){
        for (Alumno item: listaA){
            jcbCargarAlumno.addItem(item);
                    
        }
    }
    
     private void borrarFilaTabla(){
        int indice= model.getRowCount() -1;
        for (int i= indice; i>=0; i--){
            model.removeRow(i);
        }
    
    }
    
    private void editartabla(){
    model.addColumn("ID");
    model.addColumn("Nombre");
    model.addColumn("Nota");
    jtCargaNota.setModel(model);
}
    
    private void mostrarMateria(Alumno selec) {
        
        
        //jCBListaMateria.addItem("seleccionar");
        listaM = inscD.obtenerMateriasCursadas(selec.getIdAlumno());
        for (int i=0;i<listaM.size(); i++){
            jcbMateria.addItem(listaM.get(i));
    }
    }

/*private void cargarMatInsc (Alumno selec){
        
        listaM = inscD.obtenerMateriasCursadas(selec.getIdAlumno());
        for(Materia m: listaM){
           jcbMateria.addItem(m);
        }
    }*/      
}
